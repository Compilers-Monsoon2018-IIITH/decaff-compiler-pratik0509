%{
        #include <bits/stdc++.h>
        #include "node.h"
        using namespace std;
        extern "C" int yylex();
        extern int yyparse();
        extern union node yylval;
        extern FILE* yyin;
        extern int line_no;
        program *start;
        void yyerror(const char *s);
%}

%token KEY_CLASS KEY_PROGRAM O_COMMA KEY_FOR
%token <str_value> IDENTIFIER
%token <str_value> KEY_TYPE
%token O_SEMICOLON KEY_IF KEY_ELSE
%token <str_value> KEY_CALLOUT
%token <str_value> STRING
%token <str_value> EQUAL_OP ADD_EQUAL_OP SUB_EQUAL_OP
%token LEFT_CBRACE RIGHT_CBRACE LEFT_SBRACE RIGHT_SBRACE
%token <ival> INT_LITERAL
%token <bval> BOOL_LITERAL
%token <cval> CHAR_LITERAL
%token <str_value> BINARY_ADD BINARY_SUBTRACT BINARY_MULTIPLY BINARY_DIVISION BINARY_MOD O_LEF O_RIT
%token <str_value> R_AND R_OR R_EQUALS R_NOT_EQUALS R_GREATER_THAN R_GREATER_THAN_EQUAL R_LESS_THAN R_LESS_THAN_EQUAL
%token <str_value> UNARY_NOT
%token KEY_RETURN
%token KEY_BREAK KEY_CONTINUE
%token KEY_VOID

// Precedence

%right EQUAL_OP ADD_EQUAL_OP SUB_EQUAL_OP
%left R_EQUALS R_NOT_EQUALS
%left R_AND R_OR
%left R_GREATER_THAN R_GREATER_THAN_EQUAL R_LESS_THAN R_LESS_THAN_EQUAL
%left BINARY_ADD BINARY_SUBTRACT
%left BINARY_DIVISION BINARY_MOD BINARY_MULTIPLY
%nonassoc UNARY_NOT

// Non-terminal type declarations
%type <prog> PROGRAM
%type <g_decl> GLOBAL_DECL
// %type <o_semicolons> O_SEMICOLONS
%type <f_decls> FIELD_DECLS
%type <id_list> IDENTIFIER_LIST
%type <m_decls> METHOD_DECLS
%type <blk> BLOCK
%type <exe> EXECUTABLES
%type <v_decl> VAR_DECL
%type <expr> EXPRESSION
%type <str_value> BINARY_OP
%type <str_value> ARITHMETIC_OP
%type <str_value> RELATIONAL_OP
%type <str_value> EQ_OP
%type <str_value> CONDITIONAL_OP
%type <lit> LITERAL
%type <stmnt> STATEMENT
%type <m_call> METHOD_CALL
%type <p_list> PARAM_LIST
%type <loc> METHOD_NAME
%type <str_value> ASSIGNMENT_OP
%type <loc> LOCATION
%type <a_list> ARG_LIST

%start PROGRAM

%%

PROGRAM: KEY_CLASS KEY_PROGRAM LEFT_CBRACE GLOBAL_DECL RIGHT_CBRACE
                { 
                        $$ = new program();
                        $$->set_global_decl($4);
                        start = $$;
                }
        ;

GLOBAL_DECL: %empty                     { $$ = new global_decl(); }
            | GLOBAL_DECL FIELD_DECLS   { $$->add_field($2); }
            | GLOBAL_DECL METHOD_DECLS  { $$->add_method($2); }
            ;

O_SEMICOLONS: O_SEMICOLON
        | O_SEMICOLONS O_SEMICOLON
        ;

FIELD_DECLS: KEY_TYPE IDENTIFIER_LIST O_SEMICOLON 
                {
                        $$ = new field_decls();
                        $$->set_field(string($1), $2);
                }
            ;

IDENTIFIER_LIST: IDENTIFIER
                        { $$ = new identifier_list(); $$->add_identifier(new identifier($1));}
                | IDENTIFIER LEFT_SBRACE INT_LITERAL RIGHT_SBRACE
                        { $$ = new identifier_list(); $$->add_identifier(new identifier($1, $3)); }
                | IDENTIFIER_LIST O_COMMA IDENTIFIER
                        { $$->add_identifier(new identifier($3)); }
                | IDENTIFIER_LIST O_COMMA IDENTIFIER LEFT_SBRACE INT_LITERAL RIGHT_SBRACE
                        { $$->add_identifier(new identifier($3)); }
                ;

METHOD_DECLS: KEY_TYPE IDENTIFIER O_LEF ARG_LIST O_RIT BLOCK
                        { $$ = new method_decls($1, new identifier($2), $4, $6); }
            | KEY_VOID IDENTIFIER O_LEF ARG_LIST O_RIT BLOCK
                        { $$ = new method_decls(new identifier($2), $4, $6); }            ;

BLOCK: LEFT_CBRACE EXECUTABLES RIGHT_CBRACE
                { $$ = new block($2); }
    ;

EXECUTABLES: %empty
                { $$ = new executables(); }
            | EXECUTABLES VAR_DECL
                { $$->add_executable($2); }
            | EXECUTABLES STATEMENT
                { $$->add_executable($2); }
            | EXECUTABLES O_SEMICOLONS
            ;

VAR_DECL: KEY_TYPE IDENTIFIER_LIST O_SEMICOLON
                { $$ = new var_decl(); $$->set_field($1, $2); }
        ;

EXPRESSION: LOCATION
                { $$ = new expression($1); }
            | METHOD_CALL
                { $$ = new expression($1); }
            | LITERAL
                { $$ = new expression($1); }
            | EXPRESSION BINARY_OP EXPRESSION
                { $$ = new expression(new binary_op($1, $3, std::string($2))); }
            | BINARY_SUBTRACT EXPRESSION
                { $$ = new expression(new unary_op($2, std::string($1))); }
            | BINARY_ADD EXPRESSION
                { $$ = new expression(new unary_op($2, std::string($1))); }
            | UNARY_NOT EXPRESSION
                { $$ = new expression(new unary_op($2, std::string($1))); }
            | O_LEF EXPRESSION O_RIT
                { $$ = $2; }
            ;

BINARY_OP: ARITHMETIC_OP        { $$ = $1; }
        | RELATIONAL_OP         { $$ = $1; }
        | EQ_OP                 { $$ = $1; }
        | CONDITIONAL_OP        { $$ = $1; }
        ;

ARITHMETIC_OP: BINARY_ADD       { $$ = $1; }
            | BINARY_SUBTRACT   { $$ = $1; }
            | BINARY_MULTIPLY   { $$ = $1; }
            | BINARY_DIVISION   { $$ = $1; }
            | BINARY_MOD        { $$ = $1; }
            ;

RELATIONAL_OP: R_LESS_THAN              { $$ = $1; }
            | R_GREATER_THAN            { $$ = $1; }
            | R_LESS_THAN_EQUAL         { $$ = $1; }
            | R_GREATER_THAN_EQUAL      { $$ = $1; }
            ;

EQ_OP: R_EQUALS         { $$ = $1; }
        | R_NOT_EQUALS  { $$ = $1; }
        ;

CONDITIONAL_OP: R_AND   { $$ = $1; }
                | R_OR  { $$ = $1; }
                ;

LITERAL: INT_LITERAL
                { $$ = new literal($1); }
        | BOOL_LITERAL
                { $$ = new literal($1); }
        | CHAR_LITERAL
                { $$ = new literal($1); }
        ;

STATEMENT: LOCATION ASSIGNMENT_OP EXPRESSION O_SEMICOLON
                {
                        $$ = new statement();
                        $$->add_statement(new assignment($1, $2, $3));
                }
        | METHOD_CALL O_SEMICOLON
                {
                        $$ = new statement();
                        $$->add_statement($1);
                }
        | KEY_IF O_LEF EXPRESSION O_RIT BLOCK
                {
                        $$ = new statement();
                        $$->add_statement(new kif($3, $5));
                }
        | KEY_IF O_LEF EXPRESSION O_RIT BLOCK KEY_ELSE BLOCK
                {
                        $$ = new statement();
                        $$->add_statement(new kif($3, $5, $7));
                }
        | KEY_FOR IDENTIFIER EQUAL_OP EXPRESSION O_COMMA EXPRESSION BLOCK
                {
                        $$ = new statement();
                        $$->add_statement(new kfor($2, $4, $6, $7));
                }
        | BLOCK
                {
                        $$ = new statement();
                        $$->add_statement($1);
                }
        | KEY_RETURN EXPRESSION O_SEMICOLON
                {
                        $$ = new statement();
                        $$->add_statement($2);
                }
        | KEY_RETURN O_SEMICOLON
                {
                        $$ = new statement();
                        $$->add_statement((expression*)nullptr);
                }
        | KEY_BREAK O_SEMICOLON
                {
                        $$ = new statement();
                        $$->add_statement('b');
                }
        | KEY_CONTINUE O_SEMICOLON
                {
                        $$ = new statement();
                        $$->add_statement('c');
                }
        ;

METHOD_CALL: METHOD_NAME O_LEF PARAM_LIST O_RIT
                        {
                                $$ = new method_call();
                                $$->set_method_call($1, $3);
                        }
            | KEY_CALLOUT O_LEF PARAM_LIST O_RIT
                        {
                                $$ = new method_call();
                                $$->set_method_call(new location($1), $3);
                        }            ;

PARAM_LIST: %empty
                { $$ = new param_list(); }
        | EXPRESSION
                {
                        $$ = new param_list();
                        $$->add_param($1);
                }
        | STRING
                {
                        $$ = new param_list();
                        $$->add_param($1);
                }
        | PARAM_LIST O_COMMA EXPRESSION
                { $$->add_param($3); }
        | PARAM_LIST O_COMMA STRING
                { $$->add_param($3); }
        ;

METHOD_NAME: IDENTIFIER         { $$ = new location($1); }
            ;

ASSIGNMENT_OP: EQUAL_OP         { $$ = $1;}
            | ADD_EQUAL_OP      { $$ = $1;}
            | SUB_EQUAL_OP      { $$ = $1;}
            ;

LOCATION: IDENTIFIER
                { $$ = new location($1); }
        | IDENTIFIER LEFT_SBRACE EXPRESSION RIGHT_SBRACE
                { $$ = new location($1, $3); }
        ;

ARG_LIST: %empty
                { $$ = new arg_list(); }
        | KEY_TYPE IDENTIFIER
                { $$ = new arg_list(); $$->add_identifier(std::string($1), new identifier($2)); }
        | ARG_LIST O_COMMA KEY_TYPE IDENTIFIER
                { $$->add_identifier(std::string($3), new identifier($4)); }
        ;


%%

int main(int argc, char** argv) {
        FILE *fin = NULL;
        if(argc >= 2) {
                fin = fopen(argv[1], "r");
                yyin = fin;
        }
        yyparse();
	// Parse through the input:

	if(start) {
                if(start->codegen()) {
                        if(argc >= 3)
                                start->codeout(argv[2]);
                        else
                                start->codeout();
                } else {
                        std::cerr << "Error generating code!!" << std::endl;
                }
        }
        return 0;
}

void yyerror(const char *s) {
	// printf("EEK, parse error!  Message: %s\n", s);
        cerr << "Error: Line:" << line_no << " : " << s << endl;
	// might as well halt now:
	exit(-1);
}
